// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package store

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
insert into
    users (username, pw_hash)
values
    (?, ?)
`

type CreateUserParams struct {
	Username string
	PwHash   sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Username, arg.PwHash)
	return err
}

const getUsers = `-- name: GetUsers :many
select
    id, username
from
    users
`

type GetUsersRow struct {
	ID       int64
	Username string
}

func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(&i.ID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
